{"version":3,"sources":["utils/mutations.js","utils/localStorage.js","utils/auth.js","pages/SearchBooks.js","utils/queries.js","pages/SavedBooks.js","components/SignupForm.js","components/LoginForm.js","components/Navbar.js","App.js","index.js"],"names":["LOGIN_USER","gql","ADD_USER","SAVE_BOOK","REMOVE_BOOK","removeBookId","bookId","savedBookIds","localStorage","getItem","JSON","parse","updatedSavedBookIds","filter","savedBookId","setItem","stringify","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","idToken","window","location","assign","removeItem","SearchBooks","useState","searchedBooks","setSearchedBooks","searchInput","setSearchInput","setSavedBookIds","useMutation","saveBook","error","useEffect","bookIdArr","length","handleFormSubmit","event","preventDefault","fetch","response","ok","Error","json","items","bookData","map","book","id","authors","volumeInfo","title","description","image","imageLinks","thumbnail","console","handleSaveBook","bookToSave","find","Auth","loggedIn","variables","data","log","Jumbotron","fluid","className","Container","Form","onSubmit","Row","Col","xs","md","Control","name","value","onChange","e","target","type","size","placeholder","Button","variant","CardColumns","Card","border","Img","src","alt","Body","Title","Text","disabled","some","savedId","onClick","QUERY_ME","SavedBooks","useQuery","loading","removeBook","userData","me","handleDeleteBook","username","savedBooks","SignupForm","email","password","userFormData","setUserFormData","validated","showAlert","setShowAlert","addUser","handleInputChange","currentTarget","checkValidity","stopPropagation","login","noValidate","Alert","dismissible","onClose","show","Group","Label","htmlFor","required","Feedback","LoginForm","AppNavbar","showModal","setShowModal","Navbar","bg","expand","Brand","as","Link","to","Toggle","Collapse","Nav","logout","Modal","onHide","Tab","defaultActiveKey","Header","closeButton","Item","eventKey","Content","Pane","handleModalClose","httpLink","createHttpLink","uri","authLink","setContext","_","headers","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a6ab4e71.chunk.js","sourcesContent":["// fetching data from apollo client.\nimport { gql } from \"@apollo/client\";\n\n// query is requesting the following data\nexport const LOGIN_USER = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser($username: String!, $email: String!, $password: String!) {\n    addUser(username: $username, email: $email, password: $password) {\n      token\n      user {\n        _id\n        username\n      }\n    }\n  }\n`;\n\nexport const SAVE_BOOK = gql`\n  mutation saveBook($bookData: BookInput!) {\n    saveBook(bookData: $bookData) {\n      _id\n      username\n      email\n      savedBooks {\n        bookId\n        authors\n        image\n        description\n        title\n        link\n      }\n    }\n  }\n`;\n\nexport const REMOVE_BOOK = gql`\n  mutation removeBook($bookId: ID!) {\n    removeBook(bookId: $bookId) {\n      _id\n      username\n      email\n      savedBooks {\n        bookId\n        authors\n        image\n        description\n        title\n        link\n      }\n    }\n  }\n`;\n","// functions that used to manage savedBooks in local storage.\n\n// function is retrieving an array of book IDs that is saved in local storage.\nexport const getSavedBookIds = () => {\n  const savedBookIds = localStorage.getItem(\"saved_books\")\n    ? JSON.parse(localStorage.getItem(\"saved_books\"))\n    // if there is no saved bookId then it returns an empty array like below.\n    : [];\n\n  return savedBookIds;\n};\n\n// saving an array of book Id to local storage.\nexport const saveBookIds = (bookIdArr) => {\n  if (bookIdArr.length) {\n    localStorage.setItem(\"saved_books\", JSON.stringify(bookIdArr));\n  } else {\n    localStorage.removeItem(\"saved_books\");\n  }\n};\n\n// removing a single bookID from the saved local storage.\nexport const removeBookId = (bookId) => {\n  const savedBookIds = localStorage.getItem(\"saved_books\")\n    ? JSON.parse(localStorage.getItem(\"saved_books\"))\n    : null;\n\n  if (!savedBookIds) {\n    return false;\n  }\n\n  const updatedSavedBookIds = savedBookIds?.filter(\n    (savedBookId) => savedBookId !== bookId\n  );\n  localStorage.setItem(\"saved_books\", JSON.stringify(updatedSavedBookIds));\n\n  return true;\n};\n","// implementing auth.\nimport decode from 'jwt-decode';\n\nclass AuthService {\n    // gathering the user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // here we are checking to see if the user is logged in.\n  loggedIn() {\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); \n  }\n\n  // double checking if the token is expired.\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  // gathering the token from localStorage.\n  getToken() {\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    localStorage.removeItem('id_token');\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Jumbotron,\n  Container,\n  Col,\n  Form,\n  Button,\n  Card,\n  CardColumns,\n} from \"react-bootstrap\";\n\nimport { useMutation } from \"@apollo/client\";\nimport { SAVE_BOOK } from \"../utils/mutations\";\nimport { saveBookIds, getSavedBookIds } from \"../utils/localStorage\";\n\nimport Auth from \"../utils/auth\";\n\nconst SearchBooks = () => {\n  const [searchedBooks, setSearchedBooks] = useState([]);\n  const [searchInput, setSearchInput] = useState(\"\");\n\n  const [savedBookIds, setSavedBookIds] = useState(getSavedBookIds());\n\n  const [saveBook, { error }] = useMutation(SAVE_BOOK);\n\n  useEffect(() => {\n    return () => saveBookIds(savedBookIds);\n  });\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    if (!searchInput) {\n      return false;\n    }\n\n    try {\n      const response = await fetch(\n        `https://www.googleapis.com/books/v1/volumes?q=${searchInput}`\n      );\n\n      if (!response.ok) {\n        throw new Error(\"There was an error!\");\n      }\n\n      const { items } = await response.json();\n\n      const bookData = items.map((book) => ({\n        bookId: book.id,\n        authors: book.volumeInfo.authors || [\"No author is being displayed\"],\n        title: book.volumeInfo.title,\n        description: book.volumeInfo.description,\n        image: book.volumeInfo.imageLinks?.thumbnail || \"\",\n      }));\n\n      setSearchedBooks(bookData);\n      setSearchInput(\"\");\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const handleSaveBook = async (bookId) => {\n    const bookToSave = searchedBooks.find((book) => book.bookId === bookId);\n\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const { data } = await saveBook({\n        variables: { bookData: { ...bookToSave } },\n      });\n      console.log(savedBookIds);\n      setSavedBookIds([...savedBookIds, bookToSave.bookId]);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  return (\n    <>\n      <Jumbotron fluid className=\"text-light bg-dark\">\n        <Container>\n          <h1>Search for Books!</h1>\n          <Form onSubmit={handleFormSubmit}>\n            <Form.Row>\n              <Col xs={12} md={8}>\n                <Form.Control\n                  name=\"searchInput\"\n                  value={searchInput}\n                  onChange={(e) => setSearchInput(e.target.value)}\n                  type=\"text\"\n                  size=\"lg\"\n                  placeholder=\"Search for a book\"\n                />\n              </Col>\n              <Col xs={12} md={4}>\n                <Button type=\"submit\" variant=\"success\" size=\"lg\">\n                  Submit Search\n                </Button>\n              </Col>\n            </Form.Row>\n          </Form>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <h2>\n          {searchedBooks.length\n            ? `Viewing ${searchedBooks.length} results:`\n            : \"Search for a book to begin\"}\n        </h2>\n        <CardColumns>\n          {searchedBooks.map((book) => {\n            return (\n              <Card key={book.bookId} border=\"dark\">\n                {book.image ? (\n                  <Card.Img\n                    src={book.image}\n                    alt={`The cover for ${book.title}`}\n                    variant=\"top\"\n                  />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className=\"small\">Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  {Auth.loggedIn() && (\n                    <Button\n                      disabled={savedBookIds?.some(\n                        (savedId) => savedId === book.bookId\n                      )}\n                      className=\"btn-block btn-info\"\n                      onClick={() => handleSaveBook(book.bookId)}\n                    >\n                      {savedBookIds?.some((savedId) => savedId === book.bookId)\n                        ? \"Book Already Saved!\"\n                        : \"Save This Book!\"}\n                    </Button>\n                  )}\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SearchBooks;\n","// fetching information about the current user.\nimport { gql } from \"@apollo/client\";\n\n// query is requesting the following information below.\n// for savedBooks, each saved book has the following properties below it.\nexport const QUERY_ME = gql`\n  {\n    me {\n      _id\n      username\n      email\n      savedBooks {\n        bookId\n        authors\n        image\n        description\n        title\n        link\n      }\n    }\n  }\n`;\n","import React from \"react\";\nimport {\n  Jumbotron,\n  Container,\n  CardColumns,\n  Card,\n  Button,\n} from \"react-bootstrap\";\n\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { QUERY_ME } from \"../utils/queries\";\nimport { REMOVE_BOOK } from \"../utils/mutations\";\nimport { removeBookId } from \"../utils/localStorage\";\n\nimport Auth from \"../utils/auth\";\n\n// implementing SaveBooks\nconst SavedBooks = () => {\n  // Retrieving data about the currently logged in user and useQuery hook is used to fetch data\n  const { loading, data } = useQuery(QUERY_ME);\n  const [removeBook, { error }] = useMutation(REMOVE_BOOK);\n\n  const userData = data?.me || {};\n  // executing a mutation to remove saved books from the users account\n  const handleDeleteBook = async (bookId) => {\n    // getting a token\n    const token = Auth.loggedIn() ? Auth.getToken() : null;\n\n    if (!token) {\n      return false;\n    }\n\n    try {\n      const { data } = await removeBook({\n        variables: { bookId },\n      });\n\n      removeBookId(bookId);\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  if (loading) {\n    return <h2>LOADING...</h2>;\n  }\n  // displaying the books for the user\n  // also using boostrap components.\n  return (\n    <>\n      <Jumbotron fluid className=\"text-light bg-dark\">\n        <Container>\n          <h1>Viewing {userData.username}'s books!</h1>\n        </Container>\n      </Jumbotron>\n      <Container>\n        <h2>\n          {userData.savedBooks?.length\n            ? `Viewing ${userData.savedBooks.length} saved ${\n                userData.savedBooks.length === 1 ? \"book\" : \"books\"\n              }:`\n            : \"There are no saved books.\"}\n        </h2>\n        <CardColumns>\n          {userData.savedBooks?.map((book) => {\n            return (\n              <Card key={book.bookId} border=\"dark\">\n                {book.image ? (\n                  <Card.Img\n                    src={book.image}\n                    alt={`The cover for ${book.title}`}\n                    variant=\"top\"\n                  />\n                ) : null}\n                <Card.Body>\n                  <Card.Title>{book.title}</Card.Title>\n                  <p className=\"small\">Authors: {book.authors}</p>\n                  <Card.Text>{book.description}</Card.Text>\n                  <Button\n                    className=\"btn-block btn-danger\"\n                    onClick={() => handleDeleteBook(book.bookId)}\n                  >\n                    Delete this Book!\n                  </Button>\n                </Card.Body>\n              </Card>\n            );\n          })}\n        </CardColumns>\n      </Container>\n    </>\n  );\n};\n\nexport default SavedBooks;\n","import React, { useState, useEffect } from \"react\";\nimport { Form, Button, Alert } from \"react-bootstrap\";\n\nimport { useMutation } from \"@apollo/client\";\nimport { ADD_USER } from \"../utils/mutations\";\n\nimport Auth from \"../utils/auth\";\n\nconst SignupForm = () => {\n  const [userFormData, setUserFormData] = useState({\n    username: \"\",\n    email: \"\",\n    password: \"\",\n  });\n\n  const [validated] = useState(false);\n\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [addUser, { error }] = useMutation(ADD_USER);\n\n  useEffect(() => {\n    if (error) {\n      setShowAlert(true);\n    } else {\n      setShowAlert(false);\n    }\n  }, [error]);\n\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await addUser({\n        variables: { ...userFormData },\n      });\n      console.log(data);\n      Auth.login(data.addUser.token);\n    } catch (err) {\n      console.error(err);\n    }\n\n    setUserFormData({\n      username: \"\",\n      email: \"\",\n      password: \"\",\n    });\n  };\n\n  return (\n    <>\n      {/* This is needed for the validation functionality above */}\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        {/* show alert if server response is bad */}\n        <Alert\n          dismissible\n          onClose={() => setShowAlert(false)}\n          show={showAlert}\n          variant=\"danger\"\n        >\n          Something went wrong with your signup!\n        </Alert>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"username\">Username</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Your username\"\n            name=\"username\"\n            onChange={handleInputChange}\n            value={userFormData.username}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Username is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\n          <Form.Control\n            type=\"email\"\n            placeholder=\"Your email address\"\n            name=\"email\"\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Email is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Your password\"\n            name=\"password\"\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Password is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={\n            !(\n              userFormData.username &&\n              userFormData.email &&\n              userFormData.password\n            )\n          }\n          type=\"submit\"\n          variant=\"success\"\n        >\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default SignupForm;\n","// importing react, auth, apollo, login_user and react bootstrap\nimport React, { useState, useEffect } from \"react\";\nimport { Form, Button, Alert } from \"react-bootstrap\";\n\nimport { useMutation } from \"@apollo/client\";\nimport { LOGIN_USER } from \"../utils/mutations\";\n\nimport Auth from \"../utils/auth\";\n\n// defining reaact component. implementing a form for the user to login.\nconst LoginForm = () => {\n  const [userFormData, setUserFormData] = useState({ email: \"\", password: \"\" });\n  // using hook to manage the form data and validate where or not to show an error alert.\n  const [validated] = useState(false);\n  const [showAlert, setShowAlert] = useState(false);\n\n  const [login, { error }] = useMutation(LOGIN_USER);\n\n  useEffect(() => {\n    if (error) {\n      setShowAlert(true);\n    } else {\n      setShowAlert(false);\n    }\n  }, [error]);\n\n  // updating ofrm data when user inputs into field.\n  const handleInputChange = (event) => {\n    const { name, value } = event.target;\n    setUserFormData({ ...userFormData, [name]: value });\n  };\n\n  // defining a handleFormSubmit function when the form is submitted.\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n\n    const form = event.currentTarget;\n    if (form.checkValidity() === false) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n\n    try {\n      const { data } = await login({\n        variables: { ...userFormData },\n      });\n\n      console.log(data);\n      Auth.login(data.login.token);\n    } catch (e) {\n      console.error(e);\n    }\n    // clearing the form values.\n    setUserFormData({\n      email: \"\",\n      password: \"\",\n    });\n  };\n\n  // implementing a login form using bootstrap form component.\n  return (\n    <>\n      <Form noValidate validated={validated} onSubmit={handleFormSubmit}>\n        <Alert\n          dismissible\n          onClose={() => setShowAlert(false)}\n          show={showAlert}\n          variant=\"danger\"\n        >\n          There was an error with your login credentials.\n        </Alert>\n        <Form.Group>\n          <Form.Label htmlFor=\"email\">Email</Form.Label>\n          <Form.Control\n            type=\"text\"\n            placeholder=\"Your email\"\n            name=\"email\"\n            onChange={handleInputChange}\n            value={userFormData.email}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Your email is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label htmlFor=\"password\">Password</Form.Label>\n          <Form.Control\n            type=\"password\"\n            placeholder=\"Your password\"\n            name=\"password\"\n            onChange={handleInputChange}\n            value={userFormData.password}\n            required\n          />\n          <Form.Control.Feedback type=\"invalid\">\n            Password is required!\n          </Form.Control.Feedback>\n        </Form.Group>\n        <Button\n          disabled={!(userFormData.email && userFormData.password)}\n          type=\"submit\"\n          variant=\"success\"\n        >\n          Submit\n        </Button>\n      </Form>\n    </>\n  );\n};\n\nexport default LoginForm;\n","import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Navbar, Nav, Container, Modal, Tab } from \"react-bootstrap\";\nimport SignUpForm from \"./SignupForm\";\nimport LoginForm from \"./LoginForm\";\n\nimport Auth from \"../utils/auth\";\n\nconst AppNavbar = () => {\n  const [showModal, setShowModal] = useState(false);\n\n  return (\n    <>\n      <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n        <Container fluid>\n          <Navbar.Brand as={Link} to=\"/\">\n            Google Books Search\n          </Navbar.Brand>\n          <Navbar.Toggle aria-controls=\"navbar\" />\n          <Navbar.Collapse id=\"navbar\">\n            <Nav className=\"ml-auto\">\n              <Nav.Link as={Link} to=\"/\">\n                Search For Books\n              </Nav.Link>\n              {/* if user is logged in show saved books and logout */}\n              {Auth.loggedIn() ? (\n                <>\n                  <Nav.Link as={Link} to=\"/saved\">\n                    See Your Books\n                  </Nav.Link>\n                  <Nav.Link onClick={Auth.logout}>Logout</Nav.Link>\n                </>\n              ) : (\n                <Nav.Link onClick={() => setShowModal(true)}>\n                  Login/Sign Up\n                </Nav.Link>\n              )}\n            </Nav>\n          </Navbar.Collapse>\n        </Container>\n      </Navbar>\n      {/* set modal data up */}\n      <Modal\n        size=\"lg\"\n        show={showModal}\n        onHide={() => setShowModal(false)}\n        aria-labelledby=\"signup-modal\"\n      >\n        {/* tab container to do either signup or login component */}\n        <Tab.Container defaultActiveKey=\"login\">\n          <Modal.Header closeButton>\n            <Modal.Title id=\"signup-modal\">\n              <Nav variant=\"pills\">\n                <Nav.Item>\n                  <Nav.Link eventKey=\"login\">Login</Nav.Link>\n                </Nav.Item>\n                <Nav.Item>\n                  <Nav.Link eventKey=\"signup\">Sign Up</Nav.Link>\n                </Nav.Item>\n              </Nav>\n            </Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <Tab.Content>\n              <Tab.Pane eventKey=\"login\">\n                <LoginForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n              <Tab.Pane eventKey=\"signup\">\n                <SignUpForm handleModalClose={() => setShowModal(false)} />\n              </Tab.Pane>\n            </Tab.Content>\n          </Modal.Body>\n        </Tab.Container>\n      </Modal>\n    </>\n  );\n};\n\nexport default AppNavbar;\n","import React from \"react\";\nimport { BrowserRouter as Router, Routes, Route } from \"react-router-dom\";\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from \"@apollo/client\";\nimport { setContext } from \"@apollo/client/link/context\";\n\nimport SearchBooks from \"./pages/SearchBooks\";\nimport SavedBooks from \"./pages/SavedBooks\";\nimport Navbar from \"./components/Navbar\";\n\n// creating a link for graqlGql using Apollo Client Library.\nconst httpLink = createHttpLink({\n  uri: \"/graphql\",\n});\n\n// creating Authentication link for Apollo client.\n// setContext allows for the creation of a link\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem(\"id_token\");\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : \"\",\n    },\n  };\n});\n\n// Creating an ApolloClient instance.\nconst client = new ApolloClient({\n  // Concatenating authlink and httpLink. The links will be using GraphQl request.\n  link: authLink.concat(httpLink),\n  // storing results of GraphQL.\n  cache: new InMemoryCache(),\n});\n\n// representating the root component of the app.\nfunction App() {\n  return (\n    // providing the apollo client instance to all components within the provider.\n    <ApolloProvider client={client}>\n      <Router>\n        <>\n          <Navbar />\n          <Routes>\n            <Route path=\"/\" element={<SearchBooks />} />\n            <Route path=\"/saved\" element={<SavedBooks />} />\n            <Route\n              path=\"*\"\n              element={<h1 className=\"display-2\">Wrong page!</h1>}\n            />\n          </Routes>\n        </>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}